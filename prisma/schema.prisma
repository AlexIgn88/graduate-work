// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  client_id                String? // 
  email                    String? // чтобы заработал vk-провайдер
  user_id                  Int? // чтобы заработал vk-провайдер
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  topics        Topic[]
  posts         Post[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  // userName  user.name
  user      User     @relation(fields: [userId], references: [id])
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  // userName  String
  user      User     @relation(fields: [userId], references: [id])
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   Int
}

//позже продумать лучше таблицы ИМа
model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
}

model Order {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  total     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
