generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  client_id                String?
  email                    String? // чтобы заработал vk-провайдер
  user_id                  Int? // чтобы заработал vk-провайдер
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  nickname      String?   @default("")
  forumAvatar   String?   @default("")
  accounts      Account[]
  sessions      Session[]
  topics        Topic[]
  posts         Post[]
  basket        Basket[]
  order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id        Int       @id @default(autoincrement())
  title     String?
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String?
  price       Float?
  category    String?
  description String?
  quantity    Int?
  image       String?
  // createdAt   DateTime @default(now())
  // updatedAt   DateTime @updatedAt
  basket      Basket[]
  order       Order[]
}

model Basket {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  quantity  Int?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  quantity  Int?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
